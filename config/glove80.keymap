#define HOST_OS 1  // set to 1 for Linux, default is 0 (Windows)
#include "./zmk-nodefree-config/helper.h"
/* #include "./zmk-nodefree-config/international_chars/german.dtsi" */
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define LT3 24
#define LT2 25
#define LT1 26
#define LT0 27

#define LM3 36
#define LM2 37
#define LM1 38
#define LM0 39

#define LB3 48
#define LB2 49
#define LB1 50
#define LB0 51

#define RT0 28
#define RT1 29
#define RT2 30
#define RT3 31

#define RM0 40
#define RM1 41
#define RM2 42
#define RM3 43

#define RB0 58
#define RB1 59
#define RB2 60
#define RB3 61


#define GLV_LAYER(name, start, mid, end, thumb_row_1, thumb_row_2)             \
  / {                                                                          \
    keymap {                                                                   \
      compatible = "zmk,keymap";                                               \
      layer_##name {                                                           \
        label = ZMK_HELPER_STRINGIFY(name);                                    \
        bindings = <start thumb_row_1 mid thumb_row_2 end>;                    \
      };                                                                       \
    };                                                                         \
  };

#define QUICK_TAP_MS 175
#define TAPPING_TERM_MS 280
#define DEF 0
#define NAV 3
#define FN 2
#define NUM 4
#define SYS 4
#define UC 5
#define MOUSE 6

#define ___ &trans

/* ZMK_UNICODE_PAIR(   de_ae,      N0, N0,  E, N4,    N0, N0,  C, N4) */
/* ZMK_UNICODE_PAIR(   de_oe,      N0, N0,  F, N6,    N0, N0,  D, N6) */
/* ZMK_UNICODE_PAIR(   de_ue,      N0, N0,  F,  C,    N0, N0,  D,  C) */
/* ZMK_UNICODE_SINGLE( de_eszett,  N0, N0,  D,  F) */

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* Custom Defined Behaviors */
// tap: comma | shift + tap: semicolon
ZMK_BEHAVIOR(comma_morph, mod_morph,
    mods = <(MOD_LSFT|MOD_RSFT)>;
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
)

// tap: dot | shift + tap: colon
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp QMARK>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)


#define KEYS_L      \
        0  1  2  3  4         \
        10 11 12 13 14 15      \
        22 23 24 25 26 27      \
        34 35 36 37 38 39      \
        46 47 48 49 50 51      \
        64 65 66 67 68
#define                              KEYS_R \
                                        5  6  7  8  9 \
                                    16 17 18 19 20 21 \
                                    28 29 30 31 32 33 \
                                    40 41 42 43 44 45 \
                                    58 59 60 61 62 63 \
                                        75 76 77 78 79
#define THUMBS          \
                    69 52       57 74                \
                        70 53     56 73                 \
                        71 54   55 72

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <TAPPING_TERM_MS>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        global-quick-tap; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )


MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs


// tap: left-parenthesis | shft + tap: less-than
ZMK_BEHAVIOR(lpar_lt, mod_morph,
    bindings = <&kp LPAR>, <&kp LT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: right-parenthesis | shft + tap: greater-than
ZMK_BEHAVIOR(rpar_gt, mod_morph,
    bindings = <&kp RPAR>, <&kp GT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

#define HRC_LPAR   &hmr_lpar_lt RS(LCTRL) 0
#define HRC_RPAR   &hmr_rpar_gt LA(LSHIFT) 0




#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

#define HRC_TAB    &hml         LA(LCTRL) TAB
#define HRC_REPEAT &hml_repeat  LS(LCTRL) 0
ZMK_COMBO(tab,   HRC_TAB,       LM3 LM2,     DEF NAV NUM, COMBO_TERM_FAST)
ZMK_COMBO(repeat,HRC_REPEAT,    LM2 LM1,     DEF NAV NUM, COMBO_TERM_FAST)

ZMK_COMBO(lpar,  HRC_LPAR,      RM1 RM2,     DEF     NUM, COMBO_TERM_FAST)
ZMK_COMBO(rpar,  HRC_RPAR,      RM2 RM3,     DEF     NUM, COMBO_TERM_FAST)
ZMK_COMBO(lt,    &kp LT,        RM1 RM2,         NAV    , COMBO_TERM_FAST)
ZMK_COMBO(gt,    &kp GT,        RM2 RM3,         NAV    , COMBO_TERM_FAST)

ZMK_COMBO(lbkt,  &kp LBKT,      RB1 RB2,     DEF     NUM, COMBO_TERM_FAST)
ZMK_COMBO(rbkt,  &kp RBKT,      RB2 RB3,     DEF     NUM, COMBO_TERM_FAST)
ZMK_COMBO(lbrc,  &kp LBRC,      RB1 RB2,         NAV    , COMBO_TERM_FAST)
ZMK_COMBO(rbrc,  &kp RBRC,      RB2 RB3,         NAV    , COMBO_TERM_FAST)

/* Vertical combos - left hand */
ZMK_COMBO(at,    &kp AT,        LT3 LM3,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(hash,  &kp HASH,      LT2 LM2,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(dllr,  &kp DLLR,      LT1 LM1,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(prcnt, &kp PRCNT,     LT0 LM0,     DEF NAV NUM, COMBO_TERM_SLOW)

ZMK_COMBO(grave, &kp GRAVE,     LM3 LB3,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(bslh,  &kp BSLH,      LM2 LB2,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(equal, &kp EQUAL,     LM1 LB1,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(tilde, &kp TILDE,     LM0 LB0,     DEF NAV NUM, COMBO_TERM_SLOW)

/* Vertical combos - right hand */
ZMK_COMBO(caret, &kp CARET,     RT0 RM0,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(plus,  &kp PLUS,      RT1 RM1,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(star,  &kp STAR,      RT2 RM2,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(amps,  &kp AMPS,      RT3 RM3,     DEF NAV NUM, COMBO_TERM_SLOW)

ZMK_COMBO(under, &kp UNDER,     RM0 RB0,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(minus, &kp MINUS,     RM1 RB1,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(slash, &kp SLASH,     RM2 RB2,     DEF NAV NUM, COMBO_TERM_SLOW)
ZMK_COMBO(pipe,  &kp PIPE,      RM3 RB3,     DEF NAV NUM, COMBO_TERM_SLOW)


/ {
behaviors {

    // We cannot override global behaviors yet (?), so make a sticky key behavior.
    skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
    };

    smart_shft: smart_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "SMART_SHIFT";
        #binding-cells = <0>;
        bindings = <&skq LSHFT>, <&caps_word>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    /* hml: homerow_mods_left { */
    /*     compatible = "zmk,behavior-hold-tap"; */
    /*     label = "HOMEROW_MODS_LEFT"; */
    /*     #binding-cells = <2>; */
    /*     tapping-term-ms = <TAPPING_TERM_MS>; */
    /*     quick_tap_ms = <QUICK_TAP_MS>; */
    /*     global-quick-tap; */
    /*     /\* flavor = "tap-unless-interrupted"; *\/ */
    /*     flavor = "balanced"; */
    /*     bindings = <&kp>, <&kp>; */
    /*     hold-trigger-key-positions = <KEYS_R THUMBS>; */
    /*     hold-trigger-on-release; */
    /* }; */

    /* hmr: homerow_mods_right { */
    /*     compatible = "zmk,behavior-hold-tap"; */
    /*     label = "HOMEROW_MODS_RIGHT"; */
    /*     #binding-cells = <2>; */
    /*     tapping-term-ms = <TAPPING_TERM_MS>; */
    /*     quick_tap_ms = <QUICK_TAP_MS>; */
    /*     global-quick-tap; */
    /*     /\* flavor = "tap-unless-interrupted"; *\/ */
    /*     flavor = "balanced"; */
    /*     bindings = <&kp>, <&kp>; */
    /*     hold-trigger-key-positions = <KEYS_R THUMBS>; */
    /*     hold-trigger-on-release; */
    /* }; */

    thb: thumb_with_repeat {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_WITH_REPEAT";
        #binding-cells = <2>;
        tapping-term-ms = <TAPPING_TERM_MS>;
        quick_tap_ms = <QUICK_TAP_MS>;
        global-quick-tap;
        /* flavor = "tap-unless-interrupted"; */
        flavor = "balanced";
        bindings = <&mo>, <&kp>;
    };

    /* td_hml_sz: tap_dance_mod_tap { */
    /*     compatible = "zmk,behavior-tap-dance"; */
    /*     label = "TAP_DANCE_MOD_TAP"; */
    /*     #binding-cells = <0>; */
    /*     tapping-term-ms = <TAPPING_TERM_MS>; */
    /*     bindings = <&hml LSHIFT S>, <&de_eszett>; */
    /* }; */

    /* td_ae: tap_dance_adiaeresis { */
    /*     compatible = "zmk,behavior-tap-dance"; */
    /*     label = "TAP_DANCE_MOD_TAP"; */
    /*     #binding-cells = <0>; */
    /*     tapping-term-ms = <TAPPING_TERM_MS>; */
    /*     bindings = <&kp A>, <&de_ae>; */
    /* }; */

    /* td_oe: tap_dance_odiaeresis { */
    /*     compatible = "zmk,behavior-tap-dance"; */
    /*     label = "TAP_DANCE_MOD_TAP"; */
    /*     #binding-cells = <0>; */
    /*     tapping-term-ms = <TAPPING_TERM_MS>; */
    /*     bindings = <&kp O>, <&de_oe>; */
    /* }; */

    /* td_ue: tap_dance_udiaeresis { */
    /*     compatible = "zmk,behavior-tap-dance"; */
    /*     label = "TAP_DANCE_MOD_TAP"; */
    /*     #binding-cells = <0>; */
    /*     tapping-term-ms = <TAPPING_TERM_MS>; */
    /*     bindings = <&kp U>, <&de_ue>; */
    /* }; */
};
};

GLV_LAYER(base,
// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                                   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
    &kp F1          &kp F2          &kp F3          &kp F4          &kp F5                                              &kp F6          &kp F7          &kp F8          &kp F9          &kp F10
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────╮   ╭───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
    &kp EQUAL       &kp N1          &kp N2          &kp N3          &kp N4          &kp N5              &kp N6          &kp N7           &kp N8         &kp N9          &kp N0          &kp MINUS
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
    &kp DEL         &kp Q           &kp W           &kp F           &kp P           &kp B               &kp J           &kp L           &kp U           &kp Y           &kp APOS        &kp BSLH
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
    &kp TAB         &kp A           &hml LALT R     &hml LSHIFT S   &hml LCTRL T    &kp G               &kp M           &hmr RCTRL N    &hmr RSHIFT E   &hmr LALT I     &kp O           &kp SQT
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
    &kp GRAVE       &kp Z           &kp X           &kp C           &hml LGUI D     &kp V            ,  &kp K           &hmr LGUI H     &comma_morph    &dot_morph      &qexcl          &kp PG_UP
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────╯   ╰───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
    &magic 2 0      &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT                        ,                  &kp HOME        &kp PG_DN       &kp PG_UP       &kp END         &kp PG_DN
// ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯                                   ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
                                                                                                     ,
//                                         ╭───────────────┬───────────────┬───────────────╮                   ╭───────────────┬───────────────┬───────────────╮
                                            &smart_shft     &lower          &kp HOME                            &kp PG_UP       &kp RGUI        &smart_shft
                                        /* ├───────────────┼───────────────┼───────────────┤ */      ,      /* ├───────────────┼───────────────┼───────────────┤ */
                                            &thb NAV BSPC   &kp ESC         &kp END                             &kp PG_DN       &kp RET         &thb NAV SPC
//                                         ╰───────────────┴───────────────┴───────────────╯                   ╰───────────────┴───────────────┴───────────────╯
)




    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";

        layer_Lower {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
       &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
       &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
       &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
   &magic 2 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };


        layer_sym {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                                &trans     &trans     &trans     &trans    &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                                &trans  &trans     &trans     &trans     &trans    &trans
 &trans    &kp AT  &kp UNDER  &kp LBKT   &kp RBKT  &kp CARET                                                 &kp EXCL  &kp LT     &kp GT  &kp EQUAL   &kp AMPS  &kp BSLH
 &trans  &kp BSLH   &kp FSLH  &kp LBRC   &kp RBRC   &kp STAR                                                &kp QMARK  &kp LPAR   &kp RPAR  &kp MINUS  &kp COLON    &kp AT
 &trans  &kp HASH   &kp DLLR  &kp PIPE  &kp TILDE  &kp GRAVE  &trans  &trans  &trans  &trans  &trans  &trans &kp PLUS  &kp PRCNT   &kp DQT    &kp SQT     &trans    &trans
 &trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans  &trans   &trans    &trans     &trans     &trans    &trans
            >;
        };

 /*        layer_sym_left { */
 /*            bindings = < */
 /* &trans    &trans     &trans    &trans     &trans                                                                     &trans  &trans  &trans  &trans  &trans */
 /* &trans    &trans     &trans    &trans     &trans     &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans */
 /* &trans    &kp AT  &kp UNDER  &kp LBKT   &kp RBKT  &kp CARET                                                  &trans  &trans  &trans  &trans  &trans  &trans */
 /* &trans  &kp BSLH   &kp FSLH  &kp LBRC   &kp RBRC   &kp STAR                                                  &trans  &trans  &trans  &trans  &trans  &trans */
 /* &trans  &kp HASH   &kp DLLR  &kp PIPE  &kp TILDE  &kp GRAVE  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans */
 /* &trans    &trans     &trans    &trans     &trans             &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans */
 /*            >; */
 /*        }; */


    };
};


// ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮                                   ╭───────────────┬───────────────┬───────────────┬───────────────┬───────────────╮
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────╮   ╭───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤   ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
// ├───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────╯ , ╰───────────────┼───────────────┼───────────────┼───────────────┼───────────────┼───────────────┤
// ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯                 ,                 ╰───────────────┴───────────────┴───────────────┴───────────────┴───────────────╯
//                                                                                                     ,
//                                         ╭───────────────┬───────────────┬───────────────╮                   ╭───────────────┬───────────────┬───────────────╮
//                                        /* ├───────────────┼───────────────┼───────────────┤ */      ,      /* ├───────────────┼───────────────┼───────────────┤ */
//                                         ╰───────────────┴───────────────┴───────────────╯                   ╰───────────────┴───────────────┴───────────────╯
