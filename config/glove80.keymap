
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>


/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
};

/ {
    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };
};

    /* Custom Defined Behaviors */
/ {
    behaviors {
    #define LEFT_HAND_KEYS      \
          0  1  2  3  4         \
         10 11 12 13 14 15      \
         22 23 24 25 26 27      \
         34 35 36 37 38 39      \
         46 47 48 49 50 51      \
         64 65 66 67 68
    #define                              RIGHT_HAND_KEYS \
                                           5  6  7  8  9 \
                                       16 17 18 19 20 21 \
                                       28 29 30 31 32 33 \
                                       40 41 42 43 44 45 \
                                       58 59 60 61 62 63 \
                                          75 76 77 78 79
    #define THUMB_KEYS          \
                        69 52       57 74                \
                         70 53     56 73                 \
                          71 54   55 72

    #define QUICK_TAP_MS 175
    #define TAPPING_TERM_MS 280

    // We cannot override global behaviors yet (?), so make a sticky key behavior.
    skq: sticky_key_quick_release {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY_KEY_QUICK_RELEASE";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
    };

    smart_shft: smart_shift {
        compatible = "zmk,behavior-mod-morph";
        label = "SMART_SHIFT";
        #binding-cells = <0>;
        bindings = <&skq LSHFT>, <&caps_word>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    hm_l: homerow_mods_left {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_LEFT";
        #binding-cells = <2>;
        tapping-term-ms = <TAPPING_TERM_MS>;
        quick_tap_ms = <QUICK_TAP_MS>;
        global-quick-tap;
        /* flavor = "tap-unless-interrupted"; */
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release;
    };

    hm_r: homerow_mods_right {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_RIGHT";
        #binding-cells = <2>;
        tapping-term-ms = <TAPPING_TERM_MS>;
        quick_tap_ms = <QUICK_TAP_MS>;
        global-quick-tap;
        /* flavor = "tap-unless-interrupted"; */
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release;
    };

    thumb: thumb_with_repeat {
        compatible = "zmk,behavior-hold-tap";
        label = "THUMB_WITH_REPEAT";
        #binding-cells = <2>;
        tapping-term-ms = <TAPPING_TERM_MS>;
        quick_tap_ms = <QUICK_TAP_MS>;
        // global-quick-tap;
        flavor = "tap-unless-interrupted";
        bindings = <&mo>, <&kp>;
    };
};
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Base {
            bindings = <
     &kp F1    &kp F2        &kp F3          &kp F4         &kp F5                                                                                                     &kp F6          &kp F7        &kp F8    &kp F9    &kp F10
  &kp EQUAL    &kp N1        &kp N2          &kp N3         &kp N4  &kp N5                                                                              &kp N6         &kp N7          &kp N8        &kp N9    &kp N0  &kp MINUS
    &kp DEL     &kp Q         &kp W           &kp F          &kp P   &kp B                                                                               &kp J          &kp L           &kp U         &kp Y  &kp SEMI   &kp BSLH
    &kp TAB     &kp A  &hm_l LALT R  &hm_l LSHIFT S  &hm_l LCTRL T   &kp G                                                                               &kp M  &hm_r RCTRL N  &hm_r RSHIFT E  &hm_r LALT I     &kp O    &kp SQT
  &kp GRAVE     &kp Z         &kp X           &kp C   &hm_l LGUI D   &kp V  &smart_shft          &lower  &kp HOME  &kp PG_UP  &kp RGUI     &smart_shft   &kp K   &hm_r LGUI H       &kp COMMA       &kp DOT  &kp FSLH  &kp PG_UP
 &magic 2 0  &kp LEFT      &kp DOWN          &kp UP      &kp RIGHT          &thumb 3 BACKSPACE  &kp ESC   &kp END  &kp PG_DN   &kp RET  &thumb 4 SPACE               &kp HOME       &kp PG_DN     &kp PG_UP   &kp END  &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
 &kp C_BRI_DN  &kp C_BRI_UP      &kp C_PREV      &kp C_NEXT         &kp C_PP                                                                                    &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP            &none  &kp PAUSE_BREAK
       &trans         &none           &none           &none            &none   &kp HOME                                                   &kp LEFT_PARENTHESIS  &kp KP_NUM  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_MULTIPLY  &kp PRINTSCREEN
       &trans         &none           &none    &kp UP_ARROW            &none    &kp END                                                  &kp RIGHT_PARENTHESIS   &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS   &kp SCROLLLOCK
       &trans         &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_UP                                                            &kp PERCENT   &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS            &none
       &trans     &kp K_APP           &none         &kp F11          &kp F12  &kp PG_DN  &trans  &trans   &to 0  &trans  &trans  &trans              &kp COMMA   &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER           &trans
   &magic 2 0      &kp CAPS         &kp INS         &kp F11          &kp F12             &trans  &trans  &trans  &trans  &trans  &trans                          &kp KP_N0     &kp KP_N0    &kp KP_DOT     &kp KP_ENTER           &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
       &none            &none            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
      &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none          &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };


        layer_sym_right {
            bindings = <
 &trans  &trans  &trans  &trans  &trans                                                                        &trans    &trans     &trans     &trans    &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                     &trans     &trans    &trans     &trans     &trans    &trans
 &trans  &trans  &trans  &trans  &trans  &trans                                                   &kp EXCL     &kp LT    &kp GT  &kp EQUAL   &kp AMPS  &kp BSLH
 &trans  &trans  &trans  &trans  &trans  &trans                                                  &kp QMARK   &kp LPAR  &kp RPAR  &kp MINUS  &kp COLON    &kp AT
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &kp PLUS  &kp PRCNT   &kp DQT    &kp SQT     &trans    &trans
 &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans                &trans    &trans     &trans     &trans    &trans
            >;
        };

        layer_sym_left {
            bindings = <
 &trans    &trans     &trans    &trans     &trans                                                                     &trans  &trans  &trans  &trans  &trans
 &trans    &trans     &trans    &trans     &trans     &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans    &kp AT  &kp UNDER  &kp LBKT   &kp RBKT  &kp CARET                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp BSLH   &kp FSLH  &kp LBRC   &kp RBRC   &kp STAR                                                  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &kp HASH   &kp DLLR  &kp PIPE  &kp TILDE  &kp GRAVE  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans    &trans     &trans    &trans     &trans             &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };


    };
};
